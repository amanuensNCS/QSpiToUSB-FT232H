
h7_quad_spi_um232H_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa0  08003aa0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003aa0  08003aa0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aa0  08003aa0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  24000010  08003ab8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000e8  08003ab8  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c14  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002600  00000000  00000000  00034c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00037258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  00037c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000380a9  00000000  00000000  000385b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be36  00000000  00000000  00070659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00172d06  00000000  00000000  0007c48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ef195  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000285c  00000000  00000000  001ef1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003a78 	.word	0x08003a78

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003a78 	.word	0x08003a78

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000412:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000418:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800041c:	bf00      	nop
 800041e:	4b57      	ldr	r3, [pc, #348]	; (800057c <main+0x170>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000426:	2b00      	cmp	r3, #0
 8000428:	d006      	beq.n	8000438 <main+0x2c>
 800042a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800042e:	1e5a      	subs	r2, r3, #1
 8000430:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8000434:	2b00      	cmp	r3, #0
 8000436:	dcf2      	bgt.n	800041e <main+0x12>
  if ( timeout < 0 )
 8000438:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800043c:	2b00      	cmp	r3, #0
 800043e:	da01      	bge.n	8000444 <main+0x38>
  {
  Error_Handler();
 8000440:	f000 fa4e 	bl	80008e0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000444:	f000 fbec 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f8a0 	bl	800058c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800044c:	4b4b      	ldr	r3, [pc, #300]	; (800057c <main+0x170>)
 800044e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000452:	4a4a      	ldr	r2, [pc, #296]	; (800057c <main+0x170>)
 8000454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800045c:	4b47      	ldr	r3, [pc, #284]	; (800057c <main+0x170>)
 800045e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000462:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000466:	463b      	mov	r3, r7
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	463b      	mov	r3, r7
 800046c:	681b      	ldr	r3, [r3, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800046e:	2000      	movs	r0, #0
 8000470:	f000 ff08 	bl	8001284 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000474:	2100      	movs	r1, #0
 8000476:	2000      	movs	r0, #0
 8000478:	f000 ff1e 	bl	80012b8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800047c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000480:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000484:	bf00      	nop
 8000486:	4b3d      	ldr	r3, [pc, #244]	; (800057c <main+0x170>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800048e:	2b00      	cmp	r3, #0
 8000490:	d106      	bne.n	80004a0 <main+0x94>
 8000492:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000496:	1e5a      	subs	r2, r3, #1
 8000498:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 800049c:	2b00      	cmp	r3, #0
 800049e:	dcf2      	bgt.n	8000486 <main+0x7a>
	if ( timeout < 0 )
 80004a0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	da01      	bge.n	80004ac <main+0xa0>
	{
	Error_Handler();
 80004a8:	f000 fa1a 	bl	80008e0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ac:	f000 f930 	bl	8000710 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004b0:	f000 f8e8 	bl	8000684 <MX_QUADSPI_Init>
  MX_MDMA_Init();
 80004b4:	f000 f912 	bl	80006dc <MX_MDMA_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t i = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
  uint8_t buf[0xFF+1];
  for (i=0; i<(0xff+1); i++) {
 80004be:	2300      	movs	r3, #0
 80004c0:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
  	  buf[i] = i;
 80004c4:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80004c8:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80004cc:	f897 120b 	ldrb.w	r1, [r7, #523]	; 0x20b
 80004d0:	54d1      	strb	r1, [r2, r3]
  	  if (i==0xff)
 80004d2:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80004d6:	2bff      	cmp	r3, #255	; 0xff
 80004d8:	d005      	beq.n	80004e6 <main+0xda>
  for (i=0; i<(0xff+1); i++) {
 80004da:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80004de:	3301      	adds	r3, #1
 80004e0:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
  	  buf[i] = i;
 80004e4:	e7ee      	b.n	80004c4 <main+0xb8>
  		  break;
 80004e6:	bf00      	nop
  }
  i = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

  uint32_t buf32[64];
  for (i = 0; i < (0xFF+1)/4; i++){
 80004ee:	2300      	movs	r3, #0
 80004f0:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
 80004f4:	e011      	b.n	800051a <main+0x10e>
	  memcpy(&buf32[i], &buf[i*4], 4);
 80004f6:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80004fa:	1d3a      	adds	r2, r7, #4
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8000504:	0092      	lsls	r2, r2, #2
 8000506:	f507 7182 	add.w	r1, r7, #260	; 0x104
 800050a:	440a      	add	r2, r1
 800050c:	6812      	ldr	r2, [r2, #0]
 800050e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (0xFF+1)/4; i++){
 8000510:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8000514:	3301      	adds	r3, #1
 8000516:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
 800051a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800051e:	2b3f      	cmp	r3, #63	; 0x3f
 8000520:	d9e9      	bls.n	80004f6 <main+0xea>
	  //buf32[i] = 0x01020304;
	  //buf32[i] = buf[i] | (buf[i+1] << 4) | (buf[i+2] << 8) | (buf[i+3] << 12);
  }
  uint8_t count = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a


	  // QUADSPI USAGE: Page 937/3528 Reference manual
	  // 1.Nr Byte to write
	  // All ones means undefined length, go on forever.
	  QUADSPI->DLR = 0xFFFFFFFF; // Determines how many bytes to send in one command sequence. That is, how big the data sequence is.
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <main+0x174>)
 800052a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800052e:	611a      	str	r2, [r3, #16]
	  // Frame format, mode and instruction code
	  // Defaults are already Indirect write mode(called FMODE), instruciton on every transaction and SDR.
	  // Four lines for data and instructions. Use one dummy cycle. Instruction we want to send is 0x0.
	  QUADSPI->CCR = QUADSPI_CCR_DMODE_1 | QUADSPI_CCR_DMODE_0 | QUADSPI_CCR_IMODE_0 | QUADSPI_CCR_IMODE_1 | (QUADSPI_CCR_DCYC_0);
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <main+0x174>)
 8000532:	4a14      	ldr	r2, [pc, #80]	; (8000584 <main+0x178>)
 8000534:	615a      	str	r2, [r3, #20]
	  // 3. skipped
	  // 4. CR Configuration
	  // Clock prescaler to 7 to get frequency to 240/8 = 30 MHz. FIFO threshold set to 4.

	  QUADSPI->CR = QUADSPI_CR_EN | (8 << QUADSPI_CR_PRESCALER_Pos) | (3 << QUADSPI_CR_FTHRES_Pos);
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <main+0x174>)
 8000538:	4a13      	ldr	r2, [pc, #76]	; (8000588 <main+0x17c>)
 800053a:	601a      	str	r2, [r3, #0]

*/

	  //      MANUAL WITHOUT DMA

	  uint32_t writeVal = 0x2a2a2a2a;
 800053c:	f04f 332a 	mov.w	r3, #707406378	; 0x2a2a2a2a
 8000540:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	  //5. Target address
	  //QUADSPI->AR = ... We don't send a messsage with address
	  while (1) {
		  // Wait until 4 bytes is free in FIFO buffer.
		  while ((QUADSPI->SR & QUADSPI_SR_FTF_Msk) == 0) {};
 8000544:	bf00      	nop
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <main+0x174>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f9      	beq.n	8000546 <main+0x13a>

		  QUADSPI->DR = buf32[count];
 8000552:	f897 220a 	ldrb.w	r2, [r7, #522]	; 0x20a
 8000556:	490a      	ldr	r1, [pc, #40]	; (8000580 <main+0x174>)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800055e:	620b      	str	r3, [r1, #32]
		  count += 1;
 8000560:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8000564:	3301      	adds	r3, #1
 8000566:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
		  if (count == 64)
 800056a:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 800056e:	2b40      	cmp	r3, #64	; 0x40
 8000570:	d1e8      	bne.n	8000544 <main+0x138>
			  count = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
		  while ((QUADSPI->SR & QUADSPI_SR_FTF_Msk) == 0) {};
 8000578:	e7e4      	b.n	8000544 <main+0x138>
 800057a:	bf00      	nop
 800057c:	58024400 	.word	0x58024400
 8000580:	52005000 	.word	0x52005000
 8000584:	03040300 	.word	0x03040300
 8000588:	08000301 	.word	0x08000301

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b09c      	sub	sp, #112	; 0x70
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000596:	224c      	movs	r2, #76	; 0x4c
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fa64 	bl	8003a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2220      	movs	r2, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fa5e 	bl	8003a68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005ac:	2004      	movs	r0, #4
 80005ae:	f001 f923 	bl	80017f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	4b31      	ldr	r3, [pc, #196]	; (800067c <SystemClock_Config+0xf0>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a30      	ldr	r2, [pc, #192]	; (800067c <SystemClock_Config+0xf0>)
 80005bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <SystemClock_Config+0xf0>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <SystemClock_Config+0xf4>)
 80005ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d0:	4a2b      	ldr	r2, [pc, #172]	; (8000680 <SystemClock_Config+0xf4>)
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005d8:	4b29      	ldr	r3, [pc, #164]	; (8000680 <SystemClock_Config+0xf4>)
 80005da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005e4:	bf00      	nop
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <SystemClock_Config+0xf0>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005f2:	d1f8      	bne.n	80005e6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2340      	movs	r3, #64	; 0x40
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800060c:	233c      	movs	r3, #60	; 0x3c
 800060e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800061c:	230c      	movs	r3, #12
 800061e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000620:	2300      	movs	r3, #0
 8000622:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062c:	4618      	mov	r0, r3
 800062e:	f001 f9f7 	bl	8001a20 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000638:	f000 f952 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	233f      	movs	r3, #63	; 0x3f
 800063e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2303      	movs	r3, #3
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000648:	2308      	movs	r3, #8
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800064c:	2340      	movs	r3, #64	; 0x40
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000650:	2340      	movs	r3, #64	; 0x40
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000658:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800065a:	2340      	movs	r3, #64	; 0x40
 800065c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2104      	movs	r1, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fe08 	bl	8002278 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800066e:	f000 f937 	bl	80008e0 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3770      	adds	r7, #112	; 0x70
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	58024800 	.word	0x58024800
 8000680:	58000400 	.word	0x58000400

08000684 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_QUADSPI_Init+0x50>)
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <MX_QUADSPI_Init+0x54>)
 800068c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 7;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_QUADSPI_Init+0x50>)
 8000690:	2207      	movs	r2, #7
 8000692:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_QUADSPI_Init+0x50>)
 8000696:	2201      	movs	r2, #1
 8000698:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_QUADSPI_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 31;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_QUADSPI_Init+0x50>)
 80006a2:	221f      	movs	r2, #31
 80006a4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_QUADSPI_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_3;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_QUADSPI_Init+0x50>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_QUADSPI_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_QUADSPI_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_QUADSPI_Init+0x50>)
 80006c0:	f001 f8f4 	bl	80018ac <HAL_QSPI_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80006ca:	f000 f909 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	24000098 	.word	0x24000098
 80006d8:	52005000 	.word	0x52005000

080006dc <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_MDMA_Init+0x30>)
 80006e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006e8:	4a08      	ldr	r2, [pc, #32]	; (800070c <MX_MDMA_Init+0x30>)
 80006ea:	f043 0301 	orr.w	r3, r3, #1
 80006ee:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_MDMA_Init+0x30>)
 80006f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(MDMA_IRQn);

}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	58024400 	.word	0x58024400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4b68      	ldr	r3, [pc, #416]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	4a66      	ldr	r2, [pc, #408]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000736:	4b64      	ldr	r3, [pc, #400]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	f003 0310 	and.w	r3, r3, #16
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	4b60      	ldr	r3, [pc, #384]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	4a5f      	ldr	r2, [pc, #380]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000754:	4b5c      	ldr	r3, [pc, #368]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b59      	ldr	r3, [pc, #356]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	4a57      	ldr	r2, [pc, #348]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 800076a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000772:	4b55      	ldr	r3, [pc, #340]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000780:	4b51      	ldr	r3, [pc, #324]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	4a50      	ldr	r2, [pc, #320]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000790:	4b4d      	ldr	r3, [pc, #308]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b4a      	ldr	r3, [pc, #296]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	4a48      	ldr	r2, [pc, #288]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ae:	4b46      	ldr	r3, [pc, #280]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007bc:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	4a41      	ldr	r2, [pc, #260]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007cc:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007da:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	4a39      	ldr	r2, [pc, #228]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80007f8:	2332      	movs	r3, #50	; 0x32
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000808:	230b      	movs	r3, #11
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	482e      	ldr	r0, [pc, #184]	; (80008cc <MX_GPIO_Init+0x1bc>)
 8000814:	f000 fb86 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000818:	2386      	movs	r3, #134	; 0x86
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000828:	230b      	movs	r3, #11
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4827      	ldr	r0, [pc, #156]	; (80008d0 <MX_GPIO_Init+0x1c0>)
 8000834:	f000 fb76 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084a:	230b      	movs	r3, #11
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	481f      	ldr	r0, [pc, #124]	; (80008d4 <MX_GPIO_Init+0x1c4>)
 8000856:	f000 fb65 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800085a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800086c:	2307      	movs	r3, #7
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4818      	ldr	r0, [pc, #96]	; (80008d8 <MX_GPIO_Init+0x1c8>)
 8000878:	f000 fb54 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800087c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800088e:	230a      	movs	r3, #10
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_GPIO_Init+0x1c0>)
 800089a:	f000 fb43 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800089e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b0:	230b      	movs	r3, #11
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4808      	ldr	r0, [pc, #32]	; (80008dc <MX_GPIO_Init+0x1cc>)
 80008bc:	f000 fb32 	bl	8000f24 <HAL_GPIO_Init>

}
 80008c0:	bf00      	nop
 80008c2:	3730      	adds	r7, #48	; 0x30
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58024400 	.word	0x58024400
 80008cc:	58020800 	.word	0x58020800
 80008d0:	58020000 	.word	0x58020000
 80008d4:	58020400 	.word	0x58020400
 80008d8:	58020c00 	.word	0x58020c00
 80008dc:	58021800 	.word	0x58021800

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_MspInit+0x30>)
 80008f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008f8:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x30>)
 80008fa:	f043 0302 	orr.w	r3, r3, #2
 80008fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x30>)
 8000904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	58024400 	.word	0x58024400

08000920 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0bc      	sub	sp, #240	; 0xf0
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	22bc      	movs	r2, #188	; 0xbc
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f003 f891 	bl	8003a68 <memset>
  if(hqspi->Instance==QUADSPI)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a7e      	ldr	r2, [pc, #504]	; (8000b44 <HAL_QSPI_MspInit+0x224>)
 800094c:	4293      	cmp	r3, r2
 800094e:	f040 80f5 	bne.w	8000b3c <HAL_QSPI_MspInit+0x21c>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000956:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000958:	2300      	movs	r3, #0
 800095a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	4618      	mov	r0, r3
 8000962:	f001 ffb9 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 800096c:	f7ff ffb8 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000970:	4b75      	ldr	r3, [pc, #468]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 8000972:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000976:	4a74      	ldr	r2, [pc, #464]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000980:	4b71      	ldr	r3, [pc, #452]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 8000982:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800098e:	4b6e      	ldr	r3, [pc, #440]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a6c      	ldr	r2, [pc, #432]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6a      	ldr	r3, [pc, #424]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0310 	and.w	r3, r3, #16
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	4b66      	ldr	r3, [pc, #408]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a65      	ldr	r2, [pc, #404]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b62      	ldr	r3, [pc, #392]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b5f      	ldr	r3, [pc, #380]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a5d      	ldr	r2, [pc, #372]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b5b      	ldr	r3, [pc, #364]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e8:	4b57      	ldr	r3, [pc, #348]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	4a56      	ldr	r2, [pc, #344]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f8:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <HAL_QSPI_MspInit+0x228>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a06:	2304      	movs	r3, #4
 8000a08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a1e:	2309      	movs	r3, #9
 8000a20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4848      	ldr	r0, [pc, #288]	; (8000b4c <HAL_QSPI_MspInit+0x22c>)
 8000a2c:	f000 fa7a 	bl	8000f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a30:	2304      	movs	r3, #4
 8000a32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a48:	2309      	movs	r3, #9
 8000a4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a52:	4619      	mov	r1, r3
 8000a54:	483e      	ldr	r0, [pc, #248]	; (8000b50 <HAL_QSPI_MspInit+0x230>)
 8000a56:	f000 fa65 	bl	8000f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000a5a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a74:	2309      	movs	r3, #9
 8000a76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4834      	ldr	r0, [pc, #208]	; (8000b54 <HAL_QSPI_MspInit+0x234>)
 8000a82:	f000 fa4f 	bl	8000f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a86:	2340      	movs	r3, #64	; 0x40
 8000a88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	482b      	ldr	r0, [pc, #172]	; (8000b58 <HAL_QSPI_MspInit+0x238>)
 8000aac:	f000 fa3a 	bl	8000f24 <HAL_GPIO_Init>

    /* QUADSPI MDMA Init */
    /* QUADSPI_FIFO_TH Init */
    hmdma_quadspi_fifo_th.Instance = MDMA_Channel0;
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000ab2:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <HAL_QSPI_MspInit+0x240>)
 8000ab4:	601a      	str	r2, [r3, #0]
    hmdma_quadspi_fifo_th.Init.Request = MDMA_REQUEST_QUADSPI_FIFO_TH;
 8000ab6:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000ab8:	2216      	movs	r2, #22
 8000aba:	605a      	str	r2, [r3, #4]
    hmdma_quadspi_fifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
    hmdma_quadspi_fifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	60da      	str	r2, [r3, #12]
    hmdma_quadspi_fifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
    hmdma_quadspi_fifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	615a      	str	r2, [r3, #20]
    hmdma_quadspi_fifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
    hmdma_quadspi_fifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
    hmdma_quadspi_fifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
    hmdma_quadspi_fifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000ae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_quadspi_fifo_th.Init.BufferTransferLength = 1;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_quadspi_fifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_quadspi_fifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_quadspi_fifo_th.Init.SourceBlockAddressOffset = 0;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_quadspi_fifo_th.Init.DestBlockAddressOffset = 0;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_quadspi_fifo_th) != HAL_OK)
 8000b0c:	4813      	ldr	r0, [pc, #76]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000b0e:	f000 fbe7 	bl	80012e0 <HAL_MDMA_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_QSPI_MspInit+0x1fc>
    {
      Error_Handler();
 8000b18:	f7ff fee2 	bl	80008e0 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_quadspi_fifo_th, 0, 0) != HAL_OK)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	480e      	ldr	r0, [pc, #56]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000b22:	f000 fc29 	bl	8001378 <HAL_MDMA_ConfigPostRequestMask>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_QSPI_MspInit+0x210>
    {
      Error_Handler();
 8000b2c:	f7ff fed8 	bl	80008e0 <Error_Handler>
    }

    __HAL_LINKDMA(hqspi,hmdma,hmdma_quadspi_fifo_th);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000b34:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <HAL_QSPI_MspInit+0x23c>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	37f0      	adds	r7, #240	; 0xf0
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	52005000 	.word	0x52005000
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	58021000 	.word	0x58021000
 8000b50:	58020400 	.word	0x58020400
 8000b54:	58020c00 	.word	0x58020c00
 8000b58:	58021800 	.word	0x58021800
 8000b5c:	2400002c 	.word	0x2400002c
 8000b60:	52000040 	.word	0x52000040

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f8a8 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_quadspi_fifo_th);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <MDMA_IRQHandler+0x10>)
 8000bbe:	f000 fc2d 	bl	800141c <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2400002c 	.word	0x2400002c

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd0:	f7ff fb82 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	; (8000c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f002 ff11 	bl	8003a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fc05 	bl	800040c <main>
  bx  lr
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c0c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c10:	08003aa8 	.word	0x08003aa8
  ldr r2, =_sbss
 8000c14:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c18:	240000e8 	.word	0x240000e8

08000c1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC3_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c26:	2003      	movs	r0, #3
 8000c28:	f000 f94a 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c2c:	f001 fcda 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8000c30:	4602      	mov	r2, r0
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_Init+0x68>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	f003 030f 	and.w	r3, r3, #15
 8000c3c:	4913      	ldr	r1, [pc, #76]	; (8000c8c <HAL_Init+0x6c>)
 8000c3e:	5ccb      	ldrb	r3, [r1, r3]
 8000c40:	f003 031f 	and.w	r3, r3, #31
 8000c44:	fa22 f303 	lsr.w	r3, r2, r3
 8000c48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_Init+0x68>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_Init+0x6c>)
 8000c54:	5cd3      	ldrb	r3, [r2, r3]
 8000c56:	f003 031f 	and.w	r3, r3, #31
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c60:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <HAL_Init+0x70>)
 8000c62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c64:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <HAL_Init+0x74>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 f814 	bl	8000c98 <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e002      	b.n	8000c80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7a:	f7ff fe37 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	08003a90 	.word	0x08003a90
 8000c90:	24000004 	.word	0x24000004
 8000c94:	24000000 	.word	0x24000000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_InitTick+0x60>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e021      	b.n	8000cf0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_InitTick+0x64>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_InitTick+0x60>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f921 	bl	8000f0a <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce0:	f000 f8f9 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x68>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2400000c 	.word	0x2400000c
 8000cfc:	24000000 	.word	0x24000000
 8000d00:	24000008 	.word	0x24000008

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	2400000c 	.word	0x2400000c
 8000d28:	240000e4 	.word	0x240000e4

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	240000e4 	.word	0x240000e4

08000d44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetREVID+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	0c1b      	lsrs	r3, r3, #16
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	5c001000 	.word	0x5c001000

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	05fa0000 	.word	0x05fa0000

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff47 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff5e 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff90 	bl	8000e14 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5f 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffb2 	bl	8000e7c <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f32:	4b89      	ldr	r3, [pc, #548]	; (8001158 <HAL_GPIO_Init+0x234>)
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f36:	e194      	b.n	8001262 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8186 	beq.w	800125c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d005      	beq.n	8000f68 <HAL_GPIO_Init+0x44>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 0201 	and.w	r2, r3, #1
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d017      	beq.n	8001006 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d123      	bne.n	800105a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691a      	ldr	r2, [r3, #16]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	69b9      	ldr	r1, [r7, #24]
 8001056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0203 	and.w	r2, r3, #3
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 80e0 	beq.w	800125c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <HAL_GPIO_Init+0x238>)
 800109e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010a2:	4a2e      	ldr	r2, [pc, #184]	; (800115c <HAL_GPIO_Init+0x238>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010ac:	4b2b      	ldr	r3, [pc, #172]	; (800115c <HAL_GPIO_Init+0x238>)
 80010ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ba:	4a29      	ldr	r2, [pc, #164]	; (8001160 <HAL_GPIO_Init+0x23c>)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <HAL_GPIO_Init+0x240>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d052      	beq.n	800118c <HAL_GPIO_Init+0x268>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <HAL_GPIO_Init+0x244>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d031      	beq.n	8001152 <HAL_GPIO_Init+0x22e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a1e      	ldr	r2, [pc, #120]	; (800116c <HAL_GPIO_Init+0x248>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d02b      	beq.n	800114e <HAL_GPIO_Init+0x22a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_GPIO_Init+0x24c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d025      	beq.n	800114a <HAL_GPIO_Init+0x226>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <HAL_GPIO_Init+0x250>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d01f      	beq.n	8001146 <HAL_GPIO_Init+0x222>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <HAL_GPIO_Init+0x254>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d019      	beq.n	8001142 <HAL_GPIO_Init+0x21e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a1a      	ldr	r2, [pc, #104]	; (800117c <HAL_GPIO_Init+0x258>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0x21a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a19      	ldr	r2, [pc, #100]	; (8001180 <HAL_GPIO_Init+0x25c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d00d      	beq.n	800113a <HAL_GPIO_Init+0x216>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a18      	ldr	r2, [pc, #96]	; (8001184 <HAL_GPIO_Init+0x260>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d007      	beq.n	8001136 <HAL_GPIO_Init+0x212>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_GPIO_Init+0x264>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_GPIO_Init+0x20e>
 800112e:	2309      	movs	r3, #9
 8001130:	e02d      	b.n	800118e <HAL_GPIO_Init+0x26a>
 8001132:	230a      	movs	r3, #10
 8001134:	e02b      	b.n	800118e <HAL_GPIO_Init+0x26a>
 8001136:	2308      	movs	r3, #8
 8001138:	e029      	b.n	800118e <HAL_GPIO_Init+0x26a>
 800113a:	2307      	movs	r3, #7
 800113c:	e027      	b.n	800118e <HAL_GPIO_Init+0x26a>
 800113e:	2306      	movs	r3, #6
 8001140:	e025      	b.n	800118e <HAL_GPIO_Init+0x26a>
 8001142:	2305      	movs	r3, #5
 8001144:	e023      	b.n	800118e <HAL_GPIO_Init+0x26a>
 8001146:	2304      	movs	r3, #4
 8001148:	e021      	b.n	800118e <HAL_GPIO_Init+0x26a>
 800114a:	2303      	movs	r3, #3
 800114c:	e01f      	b.n	800118e <HAL_GPIO_Init+0x26a>
 800114e:	2302      	movs	r3, #2
 8001150:	e01d      	b.n	800118e <HAL_GPIO_Init+0x26a>
 8001152:	2301      	movs	r3, #1
 8001154:	e01b      	b.n	800118e <HAL_GPIO_Init+0x26a>
 8001156:	bf00      	nop
 8001158:	58000080 	.word	0x58000080
 800115c:	58024400 	.word	0x58024400
 8001160:	58000400 	.word	0x58000400
 8001164:	58020000 	.word	0x58020000
 8001168:	58020400 	.word	0x58020400
 800116c:	58020800 	.word	0x58020800
 8001170:	58020c00 	.word	0x58020c00
 8001174:	58021000 	.word	0x58021000
 8001178:	58021400 	.word	0x58021400
 800117c:	58021800 	.word	0x58021800
 8001180:	58021c00 	.word	0x58021c00
 8001184:	58022000 	.word	0x58022000
 8001188:	58022400 	.word	0x58022400
 800118c:	2300      	movs	r3, #0
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	4093      	lsls	r3, r2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119e:	4938      	ldr	r1, [pc, #224]	; (8001280 <HAL_GPIO_Init+0x35c>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	3301      	adds	r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa22 f303 	lsr.w	r3, r2, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	f47f ae63 	bne.w	8000f38 <HAL_GPIO_Init+0x14>
  }
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3724      	adds	r7, #36	; 0x24
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	58000400 	.word	0x58000400

08001284 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800128c:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_HSEM_FastTake+0x2c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3320      	adds	r3, #32
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_HSEM_FastTake+0x30>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d101      	bne.n	80012a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	e000      	b.n	80012a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	58026400 	.word	0x58026400
 80012b4:	80000300 	.word	0x80000300

080012b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012c2:	4906      	ldr	r1, [pc, #24]	; (80012dc <HAL_HSEM_Release+0x24>)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	58026400 	.word	0x58026400

080012e0 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff fd20 	bl	8000d2c <HAL_GetTick>
 80012ec:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e03b      	b.n	8001370 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2202      	movs	r2, #2
 8001304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8001318:	e00f      	b.n	800133a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800131a:	f7ff fd07 	bl	8000d2c <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b05      	cmp	r3, #5
 8001326:	d908      	bls.n	800133a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2240      	movs	r2, #64	; 0x40
 800132c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2203      	movs	r2, #3
 8001332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e01a      	b.n	8001370 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1e8      	bne.n	800131a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f9bd 	bl	80016c8 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e03e      	b.n	8001410 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800139c:	2302      	movs	r3, #2
 800139e:	e037      	b.n	8001410 <HAL_MDMA_ConfigPostRequestMask+0x98>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d126      	bne.n	8001402 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d11c      	bne.n	80013fc <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d108      	bne.n	80013ea <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	e00d      	b.n	8001406 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013f8:	611a      	str	r2, [r3, #16]
 80013fa:	e004      	b.n	8001406 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	75fb      	strb	r3, [r7, #23]
 8001400:	e001      	b.n	8001406 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800140e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001410:	4618      	mov	r0, r3
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001428:	4b9a      	ldr	r3, [pc, #616]	; (8001694 <HAL_MDMA_IRQHandler+0x278>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a9a      	ldr	r2, [pc, #616]	; (8001698 <HAL_MDMA_IRQHandler+0x27c>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0a9b      	lsrs	r3, r3, #10
 8001434:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	4b97      	ldr	r3, [pc, #604]	; (800169c <HAL_MDMA_IRQHandler+0x280>)
 800143e:	4413      	add	r3, r2
 8001440:	099b      	lsrs	r3, r3, #6
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	2201      	movs	r2, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800144e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 812e 	beq.w	80016ba <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d054      	beq.n	8001516 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d04d      	beq.n	8001516 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0202 	bic.w	r2, r2, #2
 8001488:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001498:	2b00      	cmp	r3, #0
 800149a:	d106      	bne.n	80014aa <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014a0:	f043 0201 	orr.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	669a      	str	r2, [r3, #104]	; 0x68
 80014a8:	e005      	b.n	80014b6 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014ae:	f043 0202 	orr.w	r2, r3, #2
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014c4:	f043 0204 	orr.w	r2, r3, #4
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014da:	f043 0208 	orr.w	r2, r3, #8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014f0:	f043 0210 	orr.w	r2, r3, #16
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001506:	f043 0220 	orr.w	r2, r3, #32
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2201      	movs	r2, #1
 8001514:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	d012      	beq.n	800154a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f003 0320 	and.w	r3, r3, #32
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00b      	beq.n	800154a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2210      	movs	r2, #16
 8001538:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d012      	beq.n	800157e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00b      	beq.n	800157e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2208      	movs	r2, #8
 800156c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d012      	beq.n	80015b2 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2204      	movs	r2, #4
 80015a0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d039      	beq.n	8001634 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d032      	beq.n	8001634 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80015dc:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d110      	bne.n	800160c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d05d      	beq.n	80016be <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	4798      	blx	r3
        }
        return;
 800160a:	e058      	b.n	80016be <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2202      	movs	r2, #2
 8001612:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001638:	2b00      	cmp	r3, #0
 800163a:	d041      	beq.n	80016c0 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2204      	movs	r2, #4
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3301      	adds	r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	429a      	cmp	r2, r3
 800165e:	d307      	bcc.n	8001670 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f2      	bne.n	8001654 <HAL_MDMA_IRQHandler+0x238>
 800166e:	e000      	b.n	8001672 <HAL_MDMA_IRQHandler+0x256>
        break;
 8001670:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00b      	beq.n	80016a0 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2203      	movs	r2, #3
 800168c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001690:	e00a      	b.n	80016a8 <HAL_MDMA_IRQHandler+0x28c>
 8001692:	bf00      	nop
 8001694:	24000000 	.word	0x24000000
 8001698:	1b4e81b5 	.word	0x1b4e81b5
 800169c:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
 80016b8:	e002      	b.n	80016c0 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80016ba:	bf00      	nop
 80016bc:	e000      	b.n	80016c0 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 80016be:	bf00      	nop
    }
  }
}
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop

080016c8 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68d9      	ldr	r1, [r3, #12]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80016ee:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80016fa:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8001706:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	3b01      	subs	r3, #1
 800170e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8001710:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800171c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800171e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001728:	d107      	bne.n	800173a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001738:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001746:	2b00      	cmp	r3, #0
 8001748:	da11      	bge.n	800176e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001758:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	425b      	negs	r3, r3
 8001760:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	b292      	uxth	r2, r2
 800176a:	621a      	str	r2, [r3, #32]
 800176c:	e006      	b.n	800177c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b292      	uxth	r2, r2
 800177a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	2b00      	cmp	r3, #0
 8001782:	da15      	bge.n	80017b0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001792:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001798:	425b      	negs	r3, r3
 800179a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6a19      	ldr	r1, [r3, #32]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	621a      	str	r2, [r3, #32]
 80017ae:	e009      	b.n	80017c4 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6a19      	ldr	r1, [r3, #32]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ba:	041a      	lsls	r2, r3, #16
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017cc:	d006      	beq.n	80017dc <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
 80017da:	e003      	b.n	80017e4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2200      	movs	r2, #0
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2200      	movs	r2, #0
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	2b06      	cmp	r3, #6
 800180a:	d00a      	beq.n	8001822 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800180c:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	d001      	beq.n	800181e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e040      	b.n	80018a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e03e      	b.n	80018a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800182a:	491f      	ldr	r1, [pc, #124]	; (80018a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4313      	orrs	r3, r2
 8001830:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001832:	f7ff fa7b 	bl	8000d2c <HAL_GetTick>
 8001836:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001838:	e009      	b.n	800184e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800183a:	f7ff fa77 	bl	8000d2c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001848:	d901      	bls.n	800184e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e028      	b.n	80018a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800185a:	d1ee      	bne.n	800183a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b1e      	cmp	r3, #30
 8001860:	d008      	beq.n	8001874 <HAL_PWREx_ConfigSupply+0x7c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b2e      	cmp	r3, #46	; 0x2e
 8001866:	d005      	beq.n	8001874 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b1d      	cmp	r3, #29
 800186c:	d002      	beq.n	8001874 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b2d      	cmp	r3, #45	; 0x2d
 8001872:	d114      	bne.n	800189e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001874:	f7ff fa5a 	bl	8000d2c <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800187a:	e009      	b.n	8001890 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800187c:	f7ff fa56 	bl	8000d2c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800188a:	d901      	bls.n	8001890 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e007      	b.n	80018a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d1ee      	bne.n	800187c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58024800 	.word	0x58024800

080018ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff fa3a 	bl	8000d2c <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e05f      	b.n	8001984 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d107      	bne.n	80018e0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff f825 	bl	8000920 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80018d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f85a 	bl	8001994 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	021a      	lsls	r2, r3, #8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	2120      	movs	r1, #32
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f852 	bl	80019b0 <QSPI_WaitFlagStateUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001910:	7afb      	ldrb	r3, [r7, #11]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d135      	bne.n	8001982 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_QSPI_Init+0xe0>)
 800191e:	4013      	ands	r3, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6852      	ldr	r2, [r2, #4]
 8001924:	0611      	lsls	r1, r2, #24
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68d2      	ldr	r2, [r2, #12]
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	69d2      	ldr	r2, [r2, #28]
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6a12      	ldr	r2, [r2, #32]
 8001936:	4311      	orrs	r1, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	430b      	orrs	r3, r1
 800193e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_QSPI_Init+0xe4>)
 8001948:	4013      	ands	r3, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6912      	ldr	r2, [r2, #16]
 800194e:	0411      	lsls	r1, r2, #16
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6952      	ldr	r2, [r2, #20]
 8001954:	4311      	orrs	r1, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6992      	ldr	r2, [r2, #24]
 800195a:	4311      	orrs	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	430b      	orrs	r3, r1
 8001962:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001982:	7afb      	ldrb	r3, [r7, #11]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	00ffff2f 	.word	0x00ffff2f
 8001990:	ffe0f8fe 	.word	0xffe0f8fe

08001994 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80019c0:	e01a      	b.n	80019f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c8:	d016      	beq.n	80019f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ca:	f7ff f9af 	bl	8000d2c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d302      	bcc.n	80019e0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10b      	bne.n	80019f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2204      	movs	r2, #4
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e00e      	b.n	8001a16 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1d6      	bne.n	80019c2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	; 0x30
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f000 bc1c 	b.w	800226c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8087 	beq.w	8001b50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a42:	4b9e      	ldr	r3, [pc, #632]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a4c:	4b9b      	ldr	r3, [pc, #620]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	2b10      	cmp	r3, #16
 8001a56:	d007      	beq.n	8001a68 <HAL_RCC_OscConfig+0x48>
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	2b18      	cmp	r3, #24
 8001a5c:	d110      	bne.n	8001a80 <HAL_RCC_OscConfig+0x60>
 8001a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d10b      	bne.n	8001a80 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	4b94      	ldr	r3, [pc, #592]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d06c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x12e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d168      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e3f5      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d106      	bne.n	8001a98 <HAL_RCC_OscConfig+0x78>
 8001a8a:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a8b      	ldr	r2, [pc, #556]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e02e      	b.n	8001af6 <HAL_RCC_OscConfig+0xd6>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10c      	bne.n	8001aba <HAL_RCC_OscConfig+0x9a>
 8001aa0:	4b86      	ldr	r3, [pc, #536]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a85      	ldr	r2, [pc, #532]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b83      	ldr	r3, [pc, #524]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a82      	ldr	r2, [pc, #520]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e01d      	b.n	8001af6 <HAL_RCC_OscConfig+0xd6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0xbe>
 8001ac4:	4b7d      	ldr	r3, [pc, #500]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a7c      	ldr	r2, [pc, #496]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b7a      	ldr	r3, [pc, #488]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a79      	ldr	r2, [pc, #484]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0xd6>
 8001ade:	4b77      	ldr	r3, [pc, #476]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a76      	ldr	r2, [pc, #472]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b74      	ldr	r3, [pc, #464]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a73      	ldr	r2, [pc, #460]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d013      	beq.n	8001b26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff f915 	bl	8000d2c <HAL_GetTick>
 8001b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b06:	f7ff f911 	bl	8000d2c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b64      	cmp	r3, #100	; 0x64
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e3a9      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0xe6>
 8001b24:	e014      	b.n	8001b50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff f901 	bl	8000d2c <HAL_GetTick>
 8001b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f8fd 	bl	8000d2c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b64      	cmp	r3, #100	; 0x64
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e395      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b40:	4b5e      	ldr	r3, [pc, #376]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x10e>
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80ca 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5e:	4b57      	ldr	r3, [pc, #348]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b68:	4b54      	ldr	r3, [pc, #336]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_RCC_OscConfig+0x164>
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	2b18      	cmp	r3, #24
 8001b78:	d156      	bne.n	8001c28 <HAL_RCC_OscConfig+0x208>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d151      	bne.n	8001c28 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b84:	4b4d      	ldr	r3, [pc, #308]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_OscConfig+0x17c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e367      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b9c:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 0219 	bic.w	r2, r3, #25
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4944      	ldr	r1, [pc, #272]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bae:	f7ff f8bd 	bl	8000d2c <HAL_GetTick>
 8001bb2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff f8b9 	bl	8000d2c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e351      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bc8:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	f7ff f8b6 	bl	8000d44 <HAL_GetREVID>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d817      	bhi.n	8001c12 <HAL_RCC_OscConfig+0x1f2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b40      	cmp	r3, #64	; 0x40
 8001be8:	d108      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1dc>
 8001bea:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bf2:	4a32      	ldr	r2, [pc, #200]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfa:	e07a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	031b      	lsls	r3, r3, #12
 8001c0a:	492c      	ldr	r1, [pc, #176]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c10:	e06f      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	061b      	lsls	r3, r3, #24
 8001c20:	4926      	ldr	r1, [pc, #152]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c26:	e064      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d047      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c30:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 0219 	bic.w	r2, r3, #25
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	491f      	ldr	r1, [pc, #124]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff f873 	bl	8000d2c <HAL_GetTick>
 8001c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff f86f 	bl	8000d2c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e307      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c68:	f7ff f86c 	bl	8000d44 <HAL_GetREVID>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d817      	bhi.n	8001ca6 <HAL_RCC_OscConfig+0x286>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b40      	cmp	r3, #64	; 0x40
 8001c7c:	d108      	bne.n	8001c90 <HAL_RCC_OscConfig+0x270>
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c86:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	6053      	str	r3, [r2, #4]
 8001c8e:	e030      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2d2>
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	031b      	lsls	r3, r3, #12
 8001c9e:	4907      	ldr	r1, [pc, #28]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
 8001ca4:	e025      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2d2>
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	061b      	lsls	r3, r3, #24
 8001cb4:	4901      	ldr	r1, [pc, #4]	; (8001cbc <HAL_RCC_OscConfig+0x29c>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
 8001cba:	e01a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2d2>
 8001cbc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc0:	4b9e      	ldr	r3, [pc, #632]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a9d      	ldr	r2, [pc, #628]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f82e 	bl	8000d2c <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f82a 	bl	8000d2c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e2c2      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce6:	4b95      	ldr	r3, [pc, #596]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80a9 	beq.w	8001e52 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d00:	4b8e      	ldr	r3, [pc, #568]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d08:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d0a:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d007      	beq.n	8001d26 <HAL_RCC_OscConfig+0x306>
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b18      	cmp	r3, #24
 8001d1a:	d13a      	bne.n	8001d92 <HAL_RCC_OscConfig+0x372>
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d135      	bne.n	8001d92 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d26:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_RCC_OscConfig+0x31e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	2b80      	cmp	r3, #128	; 0x80
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e296      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d3e:	f7ff f801 	bl	8000d44 <HAL_GetREVID>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d817      	bhi.n	8001d7c <HAL_RCC_OscConfig+0x35c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d108      	bne.n	8001d66 <HAL_RCC_OscConfig+0x346>
 8001d54:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d5c:	4a77      	ldr	r2, [pc, #476]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d62:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d64:	e075      	b.n	8001e52 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d66:	4b75      	ldr	r3, [pc, #468]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	069b      	lsls	r3, r3, #26
 8001d74:	4971      	ldr	r1, [pc, #452]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7a:	e06a      	b.n	8001e52 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	496c      	ldr	r1, [pc, #432]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d90:	e05f      	b.n	8001e52 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d042      	beq.n	8001e20 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d9a:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a67      	ldr	r2, [pc, #412]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7fe ffc1 	bl	8000d2c <HAL_GetTick>
 8001daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dae:	f7fe ffbd 	bl	8000d2c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e255      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc0:	4b5e      	ldr	r3, [pc, #376]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dcc:	f7fe ffba 	bl	8000d44 <HAL_GetREVID>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d817      	bhi.n	8001e0a <HAL_RCC_OscConfig+0x3ea>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d108      	bne.n	8001df4 <HAL_RCC_OscConfig+0x3d4>
 8001de2:	4b56      	ldr	r3, [pc, #344]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001dea:	4a54      	ldr	r2, [pc, #336]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001df0:	6053      	str	r3, [r2, #4]
 8001df2:	e02e      	b.n	8001e52 <HAL_RCC_OscConfig+0x432>
 8001df4:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	069b      	lsls	r3, r3, #26
 8001e02:	494e      	ldr	r1, [pc, #312]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
 8001e08:	e023      	b.n	8001e52 <HAL_RCC_OscConfig+0x432>
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	061b      	lsls	r3, r3, #24
 8001e18:	4948      	ldr	r1, [pc, #288]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60cb      	str	r3, [r1, #12]
 8001e1e:	e018      	b.n	8001e52 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e20:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a45      	ldr	r2, [pc, #276]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe ff7e 	bl	8000d2c <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e34:	f7fe ff7a 	bl	8000d2c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e212      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e46:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d036      	beq.n	8001ecc <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d019      	beq.n	8001e9a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6a:	4a34      	ldr	r2, [pc, #208]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e72:	f7fe ff5b 	bl	8000d2c <HAL_GetTick>
 8001e76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7a:	f7fe ff57 	bl	8000d2c <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e1ef      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x45a>
 8001e98:	e018      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9a:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9e:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7fe ff41 	bl	8000d2c <HAL_GetTick>
 8001eaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eae:	f7fe ff3d 	bl	8000d2c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1d5      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d039      	beq.n	8001f4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d019      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ee0:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001eec:	f7fe ff1e 	bl	8000d2c <HAL_GetTick>
 8001ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ef4:	f7fe ff1a 	bl	8000d2c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1b2      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x4d4>
 8001f12:	e01b      	b.n	8001f4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <HAL_RCC_OscConfig+0x51c>)
 8001f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f20:	f7fe ff04 	bl	8000d2c <HAL_GetTick>
 8001f24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f28:	f7fe ff00 	bl	8000d2c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d904      	bls.n	8001f40 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e198      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
 8001f3a:	bf00      	nop
 8001f3c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f40:	4ba3      	ldr	r3, [pc, #652]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ed      	bne.n	8001f28 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8081 	beq.w	800205c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f5a:	4b9e      	ldr	r3, [pc, #632]	; (80021d4 <HAL_RCC_OscConfig+0x7b4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a9d      	ldr	r2, [pc, #628]	; (80021d4 <HAL_RCC_OscConfig+0x7b4>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f66:	f7fe fee1 	bl	8000d2c <HAL_GetTick>
 8001f6a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f6e:	f7fe fedd 	bl	8000d2c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b64      	cmp	r3, #100	; 0x64
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e175      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f80:	4b94      	ldr	r3, [pc, #592]	; (80021d4 <HAL_RCC_OscConfig+0x7b4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x582>
 8001f94:	4b8e      	ldr	r3, [pc, #568]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	4a8d      	ldr	r2, [pc, #564]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa0:	e02d      	b.n	8001ffe <HAL_RCC_OscConfig+0x5de>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5a4>
 8001faa:	4b89      	ldr	r3, [pc, #548]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	4a88      	ldr	r2, [pc, #544]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb6:	4b86      	ldr	r3, [pc, #536]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	4a85      	ldr	r2, [pc, #532]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc2:	e01c      	b.n	8001ffe <HAL_RCC_OscConfig+0x5de>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d10c      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x5c6>
 8001fcc:	4b80      	ldr	r3, [pc, #512]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	4a7f      	ldr	r2, [pc, #508]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd8:	4b7d      	ldr	r3, [pc, #500]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	4a7c      	ldr	r2, [pc, #496]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe4:	e00b      	b.n	8001ffe <HAL_RCC_OscConfig+0x5de>
 8001fe6:	4b7a      	ldr	r3, [pc, #488]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a79      	ldr	r2, [pc, #484]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b77      	ldr	r3, [pc, #476]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a76      	ldr	r2, [pc, #472]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d015      	beq.n	8002032 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7fe fe91 	bl	8000d2c <HAL_GetTick>
 800200a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7fe fe8d 	bl	8000d2c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	; 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e123      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002024:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ee      	beq.n	800200e <HAL_RCC_OscConfig+0x5ee>
 8002030:	e014      	b.n	800205c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7fe fe7b 	bl	8000d2c <HAL_GetTick>
 8002036:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe fe77 	bl	8000d2c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	; 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e10d      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002050:	4b5f      	ldr	r3, [pc, #380]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1ee      	bne.n	800203a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8102 	beq.w	800226a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002066:	4b5a      	ldr	r3, [pc, #360]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800206e:	2b18      	cmp	r3, #24
 8002070:	f000 80bd 	beq.w	80021ee <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2b02      	cmp	r3, #2
 800207a:	f040 8095 	bne.w	80021a8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b54      	ldr	r3, [pc, #336]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a53      	ldr	r2, [pc, #332]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7fe fe4f 	bl	8000d2c <HAL_GetTick>
 800208e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002092:	f7fe fe4b 	bl	8000d2c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e0e3      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a4:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b0:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 80020b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b4:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <HAL_RCC_OscConfig+0x7b8>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	430a      	orrs	r2, r1
 80020c4:	4942      	ldr	r1, [pc, #264]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	628b      	str	r3, [r1, #40]	; 0x28
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d8:	3b01      	subs	r3, #1
 80020da:	025b      	lsls	r3, r3, #9
 80020dc:	b29b      	uxth	r3, r3
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	3b01      	subs	r3, #1
 80020e6:	041b      	lsls	r3, r3, #16
 80020e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	3b01      	subs	r3, #1
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80020fa:	4935      	ldr	r1, [pc, #212]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002100:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	4a32      	ldr	r2, [pc, #200]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800210c:	4b30      	ldr	r3, [pc, #192]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 800210e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002110:	4b32      	ldr	r3, [pc, #200]	; (80021dc <HAL_RCC_OscConfig+0x7bc>)
 8002112:	4013      	ands	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002118:	00d2      	lsls	r2, r2, #3
 800211a:	492d      	ldr	r1, [pc, #180]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 800211c:	4313      	orrs	r3, r2
 800211e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	f023 020c 	bic.w	r2, r3, #12
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	4928      	ldr	r1, [pc, #160]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 800212e:	4313      	orrs	r3, r2
 8002130:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	f023 0202 	bic.w	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4924      	ldr	r1, [pc, #144]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002140:	4313      	orrs	r3, r2
 8002142:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe fdd4 	bl	8000d2c <HAL_GetTick>
 8002184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002188:	f7fe fdd0 	bl	8000d2c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e068      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x768>
 80021a6:	e060      	b.n	800226a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 80021ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fdba 	bl	8000d2c <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ba:	e011      	b.n	80021e0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe fdb6 	bl	8000d2c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d90a      	bls.n	80021e0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e04e      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
 80021ce:	bf00      	nop
 80021d0:	58024400 	.word	0x58024400
 80021d4:	58024800 	.word	0x58024800
 80021d8:	fffffc0c 	.word	0xfffffc0c
 80021dc:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_RCC_OscConfig+0x854>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e7      	bne.n	80021bc <HAL_RCC_OscConfig+0x79c>
 80021ec:	e03d      	b.n	800226a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <HAL_RCC_OscConfig+0x854>)
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <HAL_RCC_OscConfig+0x854>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d031      	beq.n	8002266 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d12a      	bne.n	8002266 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221c:	429a      	cmp	r2, r3
 800221e:	d122      	bne.n	8002266 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d11a      	bne.n	8002266 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	0a5b      	lsrs	r3, r3, #9
 8002234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d111      	bne.n	8002266 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d108      	bne.n	8002266 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	0e1b      	lsrs	r3, r3, #24
 8002258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002260:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3730      	adds	r7, #48	; 0x30
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	58024400 	.word	0x58024400

08002278 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e19c      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b8a      	ldr	r3, [pc, #552]	; (80024b8 <HAL_RCC_ClockConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d910      	bls.n	80022bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b87      	ldr	r3, [pc, #540]	; (80024b8 <HAL_RCC_ClockConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 020f 	bic.w	r2, r3, #15
 80022a2:	4985      	ldr	r1, [pc, #532]	; (80024b8 <HAL_RCC_ClockConfig+0x240>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b83      	ldr	r3, [pc, #524]	; (80024b8 <HAL_RCC_ClockConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e184      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d010      	beq.n	80022ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	4b7b      	ldr	r3, [pc, #492]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d908      	bls.n	80022ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022d8:	4b78      	ldr	r3, [pc, #480]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	4975      	ldr	r1, [pc, #468]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	4b70      	ldr	r3, [pc, #448]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002302:	429a      	cmp	r2, r3
 8002304:	d908      	bls.n	8002318 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002306:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	496a      	ldr	r1, [pc, #424]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002314:	4313      	orrs	r3, r2
 8002316:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	d010      	beq.n	8002346 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699a      	ldr	r2, [r3, #24]
 8002328:	4b64      	ldr	r3, [pc, #400]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002330:	429a      	cmp	r2, r3
 8002332:	d908      	bls.n	8002346 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002334:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	495e      	ldr	r1, [pc, #376]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002342:	4313      	orrs	r3, r2
 8002344:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800235e:	429a      	cmp	r2, r3
 8002360:	d908      	bls.n	8002374 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002362:	4b56      	ldr	r3, [pc, #344]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4953      	ldr	r1, [pc, #332]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002370:	4313      	orrs	r3, r2
 8002372:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d010      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	429a      	cmp	r2, r3
 800238e:	d908      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f023 020f 	bic.w	r2, r3, #15
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4947      	ldr	r1, [pc, #284]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d055      	beq.n	800245a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023ae:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	4940      	ldr	r1, [pc, #256]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d121      	bne.n	8002418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0f6      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d115      	bne.n	8002418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0ea      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023f8:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0de      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002408:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0d6      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f023 0207 	bic.w	r2, r3, #7
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4925      	ldr	r1, [pc, #148]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002426:	4313      	orrs	r3, r2
 8002428:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7fe fc7f 	bl	8000d2c <HAL_GetTick>
 800242e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002430:	e00a      	b.n	8002448 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002432:	f7fe fc7b 	bl	8000d2c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0be      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	429a      	cmp	r2, r3
 8002458:	d1eb      	bne.n	8002432 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d010      	beq.n	8002488 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	429a      	cmp	r2, r3
 8002474:	d208      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f023 020f 	bic.w	r2, r3, #15
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	490e      	ldr	r1, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002484:	4313      	orrs	r3, r2
 8002486:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_ClockConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d214      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_RCC_ClockConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 020f 	bic.w	r2, r3, #15
 800249e:	4906      	ldr	r1, [pc, #24]	; (80024b8 <HAL_RCC_ClockConfig+0x240>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <HAL_RCC_ClockConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e086      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
 80024b8:	52002000 	.word	0x52002000
 80024bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d010      	beq.n	80024ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024d8:	429a      	cmp	r2, r3
 80024da:	d208      	bcs.n	80024ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024dc:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	4939      	ldr	r1, [pc, #228]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002506:	429a      	cmp	r2, r3
 8002508:	d208      	bcs.n	800251c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	492e      	ldr	r1, [pc, #184]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002518:	4313      	orrs	r3, r2
 800251a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d010      	beq.n	800254a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699a      	ldr	r2, [r3, #24]
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002534:	429a      	cmp	r2, r3
 8002536:	d208      	bcs.n	800254a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002538:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4922      	ldr	r1, [pc, #136]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002546:	4313      	orrs	r3, r2
 8002548:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d010      	beq.n	8002578 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002562:	429a      	cmp	r2, r3
 8002564:	d208      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4917      	ldr	r1, [pc, #92]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002574:	4313      	orrs	r3, r2
 8002576:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002578:	f000 f834 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	4912      	ldr	r1, [pc, #72]	; (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
 8002594:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_RCC_ClockConfig+0x360>)
 80025ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025b0:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x364>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x368>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fb6c 	bl	8000c98 <HAL_InitTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	58024400 	.word	0x58024400
 80025d4:	08003a90 	.word	0x08003a90
 80025d8:	24000004 	.word	0x24000004
 80025dc:	24000000 	.word	0x24000000
 80025e0:	24000008 	.word	0x24000008

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ea:	4bb3      	ldr	r3, [pc, #716]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f2:	2b18      	cmp	r3, #24
 80025f4:	f200 8155 	bhi.w	80028a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80025f8:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fe:	bf00      	nop
 8002600:	08002665 	.word	0x08002665
 8002604:	080028a3 	.word	0x080028a3
 8002608:	080028a3 	.word	0x080028a3
 800260c:	080028a3 	.word	0x080028a3
 8002610:	080028a3 	.word	0x080028a3
 8002614:	080028a3 	.word	0x080028a3
 8002618:	080028a3 	.word	0x080028a3
 800261c:	080028a3 	.word	0x080028a3
 8002620:	0800268b 	.word	0x0800268b
 8002624:	080028a3 	.word	0x080028a3
 8002628:	080028a3 	.word	0x080028a3
 800262c:	080028a3 	.word	0x080028a3
 8002630:	080028a3 	.word	0x080028a3
 8002634:	080028a3 	.word	0x080028a3
 8002638:	080028a3 	.word	0x080028a3
 800263c:	080028a3 	.word	0x080028a3
 8002640:	08002691 	.word	0x08002691
 8002644:	080028a3 	.word	0x080028a3
 8002648:	080028a3 	.word	0x080028a3
 800264c:	080028a3 	.word	0x080028a3
 8002650:	080028a3 	.word	0x080028a3
 8002654:	080028a3 	.word	0x080028a3
 8002658:	080028a3 	.word	0x080028a3
 800265c:	080028a3 	.word	0x080028a3
 8002660:	08002697 	.word	0x08002697
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002664:	4b94      	ldr	r3, [pc, #592]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002670:	4b91      	ldr	r3, [pc, #580]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	08db      	lsrs	r3, r3, #3
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	4a90      	ldr	r2, [pc, #576]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002682:	e111      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002684:	4b8d      	ldr	r3, [pc, #564]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002686:	61bb      	str	r3, [r7, #24]
    break;
 8002688:	e10e      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800268a:	4b8d      	ldr	r3, [pc, #564]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800268c:	61bb      	str	r3, [r7, #24]
    break;
 800268e:	e10b      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002690:	4b8c      	ldr	r3, [pc, #560]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002692:	61bb      	str	r3, [r7, #24]
    break;
 8002694:	e108      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002696:	4b88      	ldr	r3, [pc, #544]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026a0:	4b85      	ldr	r3, [pc, #532]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026ac:	4b82      	ldr	r3, [pc, #520]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026b6:	4b80      	ldr	r3, [pc, #512]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ba:	08db      	lsrs	r3, r3, #3
 80026bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80e1 	beq.w	800289c <HAL_RCC_GetSysClockFreq+0x2b8>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	f000 8083 	beq.w	80027e8 <HAL_RCC_GetSysClockFreq+0x204>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	f200 80a1 	bhi.w	800282c <HAL_RCC_GetSysClockFreq+0x248>
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x114>
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d056      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80026f6:	e099      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026f8:	4b6f      	ldr	r3, [pc, #444]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d02d      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002704:	4b6c      	ldr	r3, [pc, #432]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	08db      	lsrs	r3, r3, #3
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	4a6b      	ldr	r2, [pc, #428]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800272e:	4b62      	ldr	r3, [pc, #392]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002742:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800274a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800274e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800275e:	e087      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800276e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002772:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002782:	ed97 6a02 	vldr	s12, [r7, #8]
 8002786:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800278a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800278e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800279a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027a2:	e065      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027b6:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027e6:	e043      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	ee07 3a90 	vmov	s15, r3
 80027ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80028d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80027f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027fa:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280a:	ed97 6a02 	vldr	s12, [r7, #8]
 800280e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800281a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800281e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800282a:	e021      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	ee07 3a90 	vmov	s15, r3
 8002832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002836:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800283a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800284e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002852:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800285a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800285e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800286e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	0a5b      	lsrs	r3, r3, #9
 8002876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800287a:	3301      	adds	r3, #1
 800287c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002888:	edd7 6a07 	vldr	s13, [r7, #28]
 800288c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002894:	ee17 3a90 	vmov	r3, s15
 8002898:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800289a:	e005      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
    break;
 80028a0:	e002      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028a4:	61bb      	str	r3, [r7, #24]
    break;
 80028a6:	bf00      	nop
  }

  return sysclockfreq;
 80028a8:	69bb      	ldr	r3, [r7, #24]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	58024400 	.word	0x58024400
 80028bc:	03d09000 	.word	0x03d09000
 80028c0:	003d0900 	.word	0x003d0900
 80028c4:	017d7840 	.word	0x017d7840
 80028c8:	46000000 	.word	0x46000000
 80028cc:	4c742400 	.word	0x4c742400
 80028d0:	4a742400 	.word	0x4a742400
 80028d4:	4bbebc20 	.word	0x4bbebc20

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028e0:	2300      	movs	r3, #0
 80028e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028e4:	2300      	movs	r3, #0
 80028e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d03f      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028fc:	d02a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002902:	d824      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002908:	d018      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800290a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800290e:	d81e      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002918:	d007      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800291a:	e018      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291c:	4bab      	ldr	r3, [pc, #684]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	4aaa      	ldr	r2, [pc, #680]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002928:	e015      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	2102      	movs	r1, #2
 8002930:	4618      	mov	r0, r3
 8002932:	f000 ff11 	bl	8003758 <RCCEx_PLL2_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800293a:	e00c      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3324      	adds	r3, #36	; 0x24
 8002940:	2102      	movs	r1, #2
 8002942:	4618      	mov	r0, r3
 8002944:	f000 ffba 	bl	80038bc <RCCEx_PLL3_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800294c:	e003      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	75fb      	strb	r3, [r7, #23]
      break;
 8002952:	e000      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800295c:	4b9b      	ldr	r3, [pc, #620]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800295e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002968:	4998      	ldr	r1, [pc, #608]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	650b      	str	r3, [r1, #80]	; 0x50
 800296e:	e001      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d03d      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	2b04      	cmp	r3, #4
 8002986:	d826      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002988:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298e:	bf00      	nop
 8002990:	080029a5 	.word	0x080029a5
 8002994:	080029b3 	.word	0x080029b3
 8002998:	080029c5 	.word	0x080029c5
 800299c:	080029dd 	.word	0x080029dd
 80029a0:	080029dd 	.word	0x080029dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029a4:	4b89      	ldr	r3, [pc, #548]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	4a88      	ldr	r2, [pc, #544]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b0:	e015      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fecd 	bl	8003758 <RCCEx_PLL2_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029c2:	e00c      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3324      	adds	r3, #36	; 0x24
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 ff76 	bl	80038bc <RCCEx_PLL3_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029d4:	e003      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
      break;
 80029da:	e000      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029e4:	4b79      	ldr	r3, [pc, #484]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	f023 0207 	bic.w	r2, r3, #7
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	4976      	ldr	r1, [pc, #472]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	650b      	str	r3, [r1, #80]	; 0x50
 80029f6:	e001      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d042      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a10:	d02b      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a16:	d825      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a18:	2bc0      	cmp	r3, #192	; 0xc0
 8002a1a:	d028      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a1c:	2bc0      	cmp	r3, #192	; 0xc0
 8002a1e:	d821      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a20:	2b80      	cmp	r3, #128	; 0x80
 8002a22:	d016      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a24:	2b80      	cmp	r3, #128	; 0x80
 8002a26:	d81d      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d007      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a30:	e018      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a32:	4b66      	ldr	r3, [pc, #408]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	4a65      	ldr	r2, [pc, #404]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a3e:	e017      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fe86 	bl	8003758 <RCCEx_PLL2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a50:	e00e      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3324      	adds	r3, #36	; 0x24
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 ff2f 	bl	80038bc <RCCEx_PLL3_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a62:	e005      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	75fb      	strb	r3, [r7, #23]
      break;
 8002a68:	e002      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e000      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a76:	4b55      	ldr	r3, [pc, #340]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	4952      	ldr	r1, [pc, #328]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	650b      	str	r3, [r1, #80]	; 0x50
 8002a88:	e001      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d049      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aa4:	d030      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aaa:	d82a      	bhi.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002aac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ab0:	d02c      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002ab2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ab6:	d824      	bhi.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002abc:	d018      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac2:	d81e      	bhi.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002acc:	d007      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002ace:	e018      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad0:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	4a3d      	ldr	r2, [pc, #244]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002adc:	e017      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fe37 	bl	8003758 <RCCEx_PLL2_Config>
 8002aea:	4603      	mov	r3, r0
 8002aec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002aee:	e00e      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3324      	adds	r3, #36	; 0x24
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fee0 	bl	80038bc <RCCEx_PLL3_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b00:	e005      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
      break;
 8002b06:	e002      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b08:	bf00      	nop
 8002b0a:	e000      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b14:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b22:	492a      	ldr	r1, [pc, #168]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	658b      	str	r3, [r1, #88]	; 0x58
 8002b28:	e001      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d04c      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b44:	d030      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b4a:	d82a      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b50:	d02c      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002b52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b56:	d824      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b5c:	d018      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b62:	d81e      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b6c:	d007      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002b6e:	e018      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b7c:	e017      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fde7 	bl	8003758 <RCCEx_PLL2_Config>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b8e:	e00e      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3324      	adds	r3, #36	; 0x24
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fe90 	bl	80038bc <RCCEx_PLL3_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ba0:	e005      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba6:	e002      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002ba8:	bf00      	nop
 8002baa:	e000      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10d      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bc2:	4902      	ldr	r1, [pc, #8]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	658b      	str	r3, [r1, #88]	; 0x58
 8002bc8:	e004      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002bca:	bf00      	nop
 8002bcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd0:	7dfb      	ldrb	r3, [r7, #23]
 8002bd2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d032      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be4:	2b30      	cmp	r3, #48	; 0x30
 8002be6:	d01c      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002be8:	2b30      	cmp	r3, #48	; 0x30
 8002bea:	d817      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d00c      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d813      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d016      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d10f      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfc:	4baf      	ldr	r3, [pc, #700]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	4aae      	ldr	r2, [pc, #696]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c08:	e00e      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2102      	movs	r1, #2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fda1 	bl	8003758 <RCCEx_PLL2_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c1a:	e005      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c20:	e002      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002c22:	bf00      	nop
 8002c24:	e000      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c2e:	4ba3      	ldr	r3, [pc, #652]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3a:	49a0      	ldr	r1, [pc, #640]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c40:	e001      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d047      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c5a:	d030      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c60:	d82a      	bhi.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002c62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c66:	d02c      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002c68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c6c:	d824      	bhi.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c72:	d018      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c78:	d81e      	bhi.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c82:	d007      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002c84:	e018      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c86:	4b8d      	ldr	r3, [pc, #564]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	4a8c      	ldr	r2, [pc, #560]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c92:	e017      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3304      	adds	r3, #4
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fd5c 	bl	8003758 <RCCEx_PLL2_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ca4:	e00e      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3324      	adds	r3, #36	; 0x24
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fe05 	bl	80038bc <RCCEx_PLL3_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cb6:	e005      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	75fb      	strb	r3, [r7, #23]
      break;
 8002cbc:	e002      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002cca:	4b7c      	ldr	r3, [pc, #496]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	4979      	ldr	r1, [pc, #484]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	650b      	str	r3, [r1, #80]	; 0x50
 8002cdc:	e001      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d049      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf6:	d02e      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cfc:	d828      	bhi.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002cfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d02:	d02a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002d04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d08:	d822      	bhi.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d0e:	d026      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002d10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d14:	d81c      	bhi.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d1a:	d010      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d20:	d816      	bhi.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01d      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fd10 	bl	8003758 <RCCEx_PLL2_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d3c:	e012      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3324      	adds	r3, #36	; 0x24
 8002d42:	2101      	movs	r1, #1
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fdb9 	bl	80038bc <RCCEx_PLL3_Config>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d4e:	e009      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	75fb      	strb	r3, [r7, #23]
      break;
 8002d54:	e006      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d56:	bf00      	nop
 8002d58:	e004      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e002      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d6a:	4b54      	ldr	r3, [pc, #336]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d76:	4951      	ldr	r1, [pc, #324]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	650b      	str	r3, [r1, #80]	; 0x50
 8002d7c:	e001      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d04b      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d98:	d02e      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d9e:	d828      	bhi.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d02a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d822      	bhi.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002dac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002db0:	d026      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002db2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002db6:	d81c      	bhi.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dbc:	d010      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc2:	d816      	bhi.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01d      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dcc:	d111      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fcbf 	bl	8003758 <RCCEx_PLL2_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002dde:	e012      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3324      	adds	r3, #36	; 0x24
 8002de4:	2101      	movs	r1, #1
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fd68 	bl	80038bc <RCCEx_PLL3_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002df0:	e009      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
      break;
 8002df6:	e006      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002df8:	bf00      	nop
 8002dfa:	e004      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002dfc:	bf00      	nop
 8002dfe:	e002      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e00:	bf00      	nop
 8002e02:	e000      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e1a:	4928      	ldr	r1, [pc, #160]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	658b      	str	r3, [r1, #88]	; 0x58
 8002e20:	e001      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d02f      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e3a:	d00e      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e40:	d814      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002e46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e4a:	d10f      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e58:	e00c      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fc79 	bl	8003758 <RCCEx_PLL2_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e6a:	e003      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e70:	e000      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e86:	490d      	ldr	r1, [pc, #52]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	650b      	str	r3, [r1, #80]	; 0x50
 8002e8c:	e001      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d033      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d81c      	bhi.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002ea6:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ee7 	.word	0x08002ee7
 8002eb0:	08002ec1 	.word	0x08002ec1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee7 	.word	0x08002ee7
 8002ebc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec0:	4bb8      	ldr	r3, [pc, #736]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	4ab7      	ldr	r2, [pc, #732]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ecc:	e00c      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fc3f 	bl	8003758 <RCCEx_PLL2_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ede:	e003      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee4:	e000      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002eee:	4bad      	ldr	r3, [pc, #692]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	f023 0203 	bic.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	49aa      	ldr	r1, [pc, #680]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f00:	e001      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8086 	beq.w	8003020 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f14:	4ba4      	ldr	r3, [pc, #656]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4aa3      	ldr	r2, [pc, #652]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f20:	f7fd ff04 	bl	8000d2c <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f26:	e009      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f28:	f7fd ff00 	bl	8000d2c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d902      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	75fb      	strb	r3, [r7, #23]
        break;
 8002f3a:	e005      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f3c:	4b9a      	ldr	r3, [pc, #616]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ef      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d166      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f4e:	4b95      	ldr	r3, [pc, #596]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f58:	4053      	eors	r3, r2
 8002f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d013      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f62:	4b90      	ldr	r3, [pc, #576]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f6c:	4b8d      	ldr	r3, [pc, #564]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4a8c      	ldr	r2, [pc, #560]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f78:	4b8a      	ldr	r3, [pc, #552]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a89      	ldr	r2, [pc, #548]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f84:	4a87      	ldr	r2, [pc, #540]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f94:	d115      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fd fec9 	bl	8000d2c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fd fec5 	bl	8000d2c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d902      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8002fb4:	e005      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fb6:	4b7b      	ldr	r3, [pc, #492]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ed      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d126      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002fd8:	4b72      	ldr	r3, [pc, #456]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fe6:	0919      	lsrs	r1, r3, #4
 8002fe8:	4b70      	ldr	r3, [pc, #448]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002fea:	400b      	ands	r3, r1
 8002fec:	496d      	ldr	r1, [pc, #436]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	610b      	str	r3, [r1, #16]
 8002ff2:	e005      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002ff4:	4b6b      	ldr	r3, [pc, #428]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	4a6a      	ldr	r2, [pc, #424]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ffa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ffe:	6113      	str	r3, [r2, #16]
 8003000:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	4965      	ldr	r1, [pc, #404]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	670b      	str	r3, [r1, #112]	; 0x70
 8003014:	e004      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003016:	7dfb      	ldrb	r3, [r7, #23]
 8003018:	75bb      	strb	r3, [r7, #22]
 800301a:	e001      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d07e      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003030:	2b28      	cmp	r3, #40	; 0x28
 8003032:	d867      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	0800310b 	.word	0x0800310b
 8003040:	08003105 	.word	0x08003105
 8003044:	08003105 	.word	0x08003105
 8003048:	08003105 	.word	0x08003105
 800304c:	08003105 	.word	0x08003105
 8003050:	08003105 	.word	0x08003105
 8003054:	08003105 	.word	0x08003105
 8003058:	08003105 	.word	0x08003105
 800305c:	080030e1 	.word	0x080030e1
 8003060:	08003105 	.word	0x08003105
 8003064:	08003105 	.word	0x08003105
 8003068:	08003105 	.word	0x08003105
 800306c:	08003105 	.word	0x08003105
 8003070:	08003105 	.word	0x08003105
 8003074:	08003105 	.word	0x08003105
 8003078:	08003105 	.word	0x08003105
 800307c:	080030f3 	.word	0x080030f3
 8003080:	08003105 	.word	0x08003105
 8003084:	08003105 	.word	0x08003105
 8003088:	08003105 	.word	0x08003105
 800308c:	08003105 	.word	0x08003105
 8003090:	08003105 	.word	0x08003105
 8003094:	08003105 	.word	0x08003105
 8003098:	08003105 	.word	0x08003105
 800309c:	0800310b 	.word	0x0800310b
 80030a0:	08003105 	.word	0x08003105
 80030a4:	08003105 	.word	0x08003105
 80030a8:	08003105 	.word	0x08003105
 80030ac:	08003105 	.word	0x08003105
 80030b0:	08003105 	.word	0x08003105
 80030b4:	08003105 	.word	0x08003105
 80030b8:	08003105 	.word	0x08003105
 80030bc:	0800310b 	.word	0x0800310b
 80030c0:	08003105 	.word	0x08003105
 80030c4:	08003105 	.word	0x08003105
 80030c8:	08003105 	.word	0x08003105
 80030cc:	08003105 	.word	0x08003105
 80030d0:	08003105 	.word	0x08003105
 80030d4:	08003105 	.word	0x08003105
 80030d8:	08003105 	.word	0x08003105
 80030dc:	0800310b 	.word	0x0800310b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fb36 	bl	8003758 <RCCEx_PLL2_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80030f0:	e00c      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3324      	adds	r3, #36	; 0x24
 80030f6:	2101      	movs	r1, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fbdf 	bl	80038bc <RCCEx_PLL3_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003102:	e003      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	75fb      	strb	r3, [r7, #23]
      break;
 8003108:	e000      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800310a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800311e:	4921      	ldr	r1, [pc, #132]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	654b      	str	r3, [r1, #84]	; 0x54
 8003124:	e001      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d03e      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313a:	2b05      	cmp	r3, #5
 800313c:	d820      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003187 	.word	0x08003187
 8003148:	0800315d 	.word	0x0800315d
 800314c:	0800316f 	.word	0x0800316f
 8003150:	08003187 	.word	0x08003187
 8003154:	08003187 	.word	0x08003187
 8003158:	08003187 	.word	0x08003187
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	2101      	movs	r1, #1
 8003162:	4618      	mov	r0, r3
 8003164:	f000 faf8 	bl	8003758 <RCCEx_PLL2_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800316c:	e00c      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3324      	adds	r3, #36	; 0x24
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fba1 	bl	80038bc <RCCEx_PLL3_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800317e:	e003      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	75fb      	strb	r3, [r7, #23]
      break;
 8003184:	e000      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d110      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800318e:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f023 0207 	bic.w	r2, r3, #7
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319a:	4902      	ldr	r1, [pc, #8]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	654b      	str	r3, [r1, #84]	; 0x54
 80031a0:	e008      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80031a2:	bf00      	nop
 80031a4:	58024400 	.word	0x58024400
 80031a8:	58024800 	.word	0x58024800
 80031ac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d039      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	d820      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80031ca:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80031cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d0:	08003213 	.word	0x08003213
 80031d4:	080031e9 	.word	0x080031e9
 80031d8:	080031fb 	.word	0x080031fb
 80031dc:	08003213 	.word	0x08003213
 80031e0:	08003213 	.word	0x08003213
 80031e4:	08003213 	.word	0x08003213
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	2101      	movs	r1, #1
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fab2 	bl	8003758 <RCCEx_PLL2_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80031f8:	e00c      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3324      	adds	r3, #36	; 0x24
 80031fe:	2101      	movs	r1, #1
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fb5b 	bl	80038bc <RCCEx_PLL3_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800320a:	e003      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
      break;
 8003210:	e000      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800321a:	4bb7      	ldr	r3, [pc, #732]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	f023 0207 	bic.w	r2, r3, #7
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	49b3      	ldr	r1, [pc, #716]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800322a:	4313      	orrs	r3, r2
 800322c:	658b      	str	r3, [r1, #88]	; 0x58
 800322e:	e001      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d04b      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800324a:	d02e      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800324c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003250:	d828      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003256:	d02a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d822      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800325e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003262:	d026      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003264:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003268:	d81c      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800326a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800326e:	d010      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003274:	d816      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01d      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800327a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800327e:	d111      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fa66 	bl	8003758 <RCCEx_PLL2_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003290:	e012      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3324      	adds	r3, #36	; 0x24
 8003296:	2102      	movs	r1, #2
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fb0f 	bl	80038bc <RCCEx_PLL3_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032a2:	e009      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
      break;
 80032a8:	e006      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80032aa:	bf00      	nop
 80032ac:	e004      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80032b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032be:	4b8e      	ldr	r3, [pc, #568]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032cc:	498a      	ldr	r1, [pc, #552]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	654b      	str	r3, [r1, #84]	; 0x54
 80032d2:	e001      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d04b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032ee:	d02e      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80032f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032f4:	d828      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80032f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fa:	d02a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003300:	d822      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003302:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003306:	d026      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003308:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800330c:	d81c      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800330e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003312:	d010      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003318:	d816      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01d      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800331e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003322:	d111      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fa14 	bl	8003758 <RCCEx_PLL2_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003334:	e012      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3324      	adds	r3, #36	; 0x24
 800333a:	2102      	movs	r1, #2
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fabd 	bl	80038bc <RCCEx_PLL3_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003346:	e009      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	75fb      	strb	r3, [r7, #23]
      break;
 800334c:	e006      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800334e:	bf00      	nop
 8003350:	e004      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003352:	bf00      	nop
 8003354:	e002      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800335a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003362:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003370:	4961      	ldr	r1, [pc, #388]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003372:	4313      	orrs	r3, r2
 8003374:	658b      	str	r3, [r1, #88]	; 0x58
 8003376:	e001      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	7dfb      	ldrb	r3, [r7, #23]
 800337a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003384:	2b00      	cmp	r3, #0
 8003386:	d04b      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800338e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003392:	d02e      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003394:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003398:	d828      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800339a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800339e:	d02a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80033a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a4:	d822      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80033a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033aa:	d026      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80033ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033b0:	d81c      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80033b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b6:	d010      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80033b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033bc:	d816      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01d      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80033c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c6:	d111      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f9c2 	bl	8003758 <RCCEx_PLL2_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80033d8:	e012      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3324      	adds	r3, #36	; 0x24
 80033de:	2102      	movs	r1, #2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fa6b 	bl	80038bc <RCCEx_PLL3_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80033ea:	e009      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	75fb      	strb	r3, [r7, #23]
      break;
 80033f0:	e006      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80033f2:	bf00      	nop
 80033f4:	e004      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80033f6:	bf00      	nop
 80033f8:	e002      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80033fa:	bf00      	nop
 80033fc:	e000      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80033fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003406:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003414:	4938      	ldr	r1, [pc, #224]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003416:	4313      	orrs	r3, r2
 8003418:	658b      	str	r3, [r1, #88]	; 0x58
 800341a:	e001      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003436:	d10a      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3324      	adds	r3, #36	; 0x24
 800343c:	2102      	movs	r1, #2
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fa3c 	bl	80038bc <RCCEx_PLL3_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800344e:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800345c:	4926      	ldr	r1, [pc, #152]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800345e:	4313      	orrs	r3, r2
 8003460:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003478:	d10a      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3324      	adds	r3, #36	; 0x24
 800347e:	2102      	movs	r1, #2
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fa1b 	bl	80038bc <RCCEx_PLL3_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349e:	4916      	ldr	r1, [pc, #88]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d036      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034ba:	d01f      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80034bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034c0:	d817      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ca:	d009      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80034cc:	e011      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f93f 	bl	8003758 <RCCEx_PLL2_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80034de:	e00e      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3324      	adds	r3, #36	; 0x24
 80034e4:	2102      	movs	r1, #2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f9e8 	bl	80038bc <RCCEx_PLL3_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80034f0:	e005      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
      break;
 80034f6:	e002      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80034f8:	58024400 	.word	0x58024400
      break;
 80034fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003504:	4b93      	ldr	r3, [pc, #588]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003512:	4990      	ldr	r1, [pc, #576]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003514:	4313      	orrs	r3, r2
 8003516:	658b      	str	r3, [r1, #88]	; 0x58
 8003518:	e001      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d033      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003530:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003534:	d01c      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003536:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800353a:	d816      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800353c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003540:	d003      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003546:	d007      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003548:	e00f      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354a:	4b82      	ldr	r3, [pc, #520]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	4a81      	ldr	r2, [pc, #516]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003554:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003556:	e00c      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3324      	adds	r3, #36	; 0x24
 800355c:	2101      	movs	r1, #1
 800355e:	4618      	mov	r0, r3
 8003560:	f000 f9ac 	bl	80038bc <RCCEx_PLL3_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003568:	e003      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
      break;
 800356e:	e000      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003578:	4b76      	ldr	r3, [pc, #472]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003586:	4973      	ldr	r1, [pc, #460]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	654b      	str	r3, [r1, #84]	; 0x54
 800358c:	e001      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d029      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80035a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035aa:	d007      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80035ac:	e00f      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ae:	4b69      	ldr	r3, [pc, #420]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	4a68      	ldr	r2, [pc, #416]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035ba:	e00b      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	2102      	movs	r1, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f8c8 	bl	8003758 <RCCEx_PLL2_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035cc:	e002      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
      break;
 80035d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035da:	4b5e      	ldr	r3, [pc, #376]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e6:	495b      	ldr	r1, [pc, #364]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035ec:	e001      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
 80035f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3324      	adds	r3, #36	; 0x24
 8003602:	2102      	movs	r1, #2
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f959 	bl	80038bc <RCCEx_PLL3_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d030      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003628:	d017      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800362a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800362e:	d811      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003634:	d013      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800363a:	d80b      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003644:	d106      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003646:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	4a42      	ldr	r2, [pc, #264]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800364c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003652:	e007      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	75fb      	strb	r3, [r7, #23]
      break;
 8003658:	e004      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800365a:	bf00      	nop
 800365c:	e002      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800366a:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003676:	4937      	ldr	r1, [pc, #220]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003678:	4313      	orrs	r3, r2
 800367a:	654b      	str	r3, [r1, #84]	; 0x54
 800367c:	e001      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800368e:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003692:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	492e      	ldr	r1, [pc, #184]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800369c:	4313      	orrs	r3, r2
 800369e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036ac:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036ba:	4926      	ldr	r1, [pc, #152]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d8:	491e      	ldr	r1, [pc, #120]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036ea:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	4a19      	ldr	r2, [pc, #100]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036f4:	6113      	str	r3, [r2, #16]
 80036f6:	4b17      	ldr	r3, [pc, #92]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003700:	4914      	ldr	r1, [pc, #80]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	da08      	bge.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800370e:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371a:	490e      	ldr	r1, [pc, #56]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800371c:	4313      	orrs	r3, r2
 800371e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	4906      	ldr	r1, [pc, #24]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003740:	7dbb      	ldrb	r3, [r7, #22]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	58024400 	.word	0x58024400

08003758 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003766:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b03      	cmp	r3, #3
 8003770:	d101      	bne.n	8003776 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e099      	b.n	80038aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003776:	4b4f      	ldr	r3, [pc, #316]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a4e      	ldr	r2, [pc, #312]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 800377c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003782:	f7fd fad3 	bl	8000d2c <HAL_GetTick>
 8003786:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003788:	e008      	b.n	800379c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800378a:	f7fd facf 	bl	8000d2c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e086      	b.n	80038aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800379c:	4b45      	ldr	r3, [pc, #276]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f0      	bne.n	800378a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80037a8:	4b42      	ldr	r3, [pc, #264]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	031b      	lsls	r3, r3, #12
 80037b6:	493f      	ldr	r1, [pc, #252]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	628b      	str	r3, [r1, #40]	; 0x28
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	025b      	lsls	r3, r3, #9
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	041b      	lsls	r3, r3, #16
 80037da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	061b      	lsls	r3, r3, #24
 80037e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037ec:	4931      	ldr	r1, [pc, #196]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80037f2:	4b30      	ldr	r3, [pc, #192]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	492d      	ldr	r1, [pc, #180]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003800:	4313      	orrs	r3, r2
 8003802:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003804:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	f023 0220 	bic.w	r2, r3, #32
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	4928      	ldr	r1, [pc, #160]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003812:	4313      	orrs	r3, r2
 8003814:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	4a26      	ldr	r2, [pc, #152]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 800381c:	f023 0310 	bic.w	r3, r3, #16
 8003820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <RCCEx_PLL2_Config+0x160>)
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	69d2      	ldr	r2, [r2, #28]
 800382e:	00d2      	lsls	r2, r2, #3
 8003830:	4920      	ldr	r1, [pc, #128]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003832:	4313      	orrs	r3, r2
 8003834:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003836:	4b1f      	ldr	r3, [pc, #124]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 800383c:	f043 0310 	orr.w	r3, r3, #16
 8003840:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 800384e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003854:	e00f      	b.n	8003876 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d106      	bne.n	800386a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800385c:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003868:	e005      	b.n	8003876 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	4a11      	ldr	r2, [pc, #68]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003874:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a0e      	ldr	r2, [pc, #56]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 800387c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003882:	f7fd fa53 	bl	8000d2c <HAL_GetTick>
 8003886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003888:	e008      	b.n	800389c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800388a:	f7fd fa4f 	bl	8000d2c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e006      	b.n	80038aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <RCCEx_PLL2_Config+0x15c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	58024400 	.word	0x58024400
 80038b8:	ffff0007 	.word	0xffff0007

080038bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038ca:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d101      	bne.n	80038da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e099      	b.n	8003a0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80038da:	4b4f      	ldr	r3, [pc, #316]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a4e      	ldr	r2, [pc, #312]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80038e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e6:	f7fd fa21 	bl	8000d2c <HAL_GetTick>
 80038ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038ec:	e008      	b.n	8003900 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80038ee:	f7fd fa1d 	bl	8000d2c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e086      	b.n	8003a0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003900:	4b45      	ldr	r3, [pc, #276]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800390c:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	051b      	lsls	r3, r3, #20
 800391a:	493f      	ldr	r1, [pc, #252]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 800391c:	4313      	orrs	r3, r2
 800391e:	628b      	str	r3, [r1, #40]	; 0x28
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	3b01      	subs	r3, #1
 8003926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	3b01      	subs	r3, #1
 8003930:	025b      	lsls	r3, r3, #9
 8003932:	b29b      	uxth	r3, r3
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	3b01      	subs	r3, #1
 800393c:	041b      	lsls	r3, r3, #16
 800393e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	3b01      	subs	r3, #1
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003950:	4931      	ldr	r1, [pc, #196]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 8003952:	4313      	orrs	r3, r2
 8003954:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003956:	4b30      	ldr	r3, [pc, #192]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	492d      	ldr	r1, [pc, #180]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 8003964:	4313      	orrs	r3, r2
 8003966:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	4928      	ldr	r1, [pc, #160]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 8003976:	4313      	orrs	r3, r2
 8003978:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800397a:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 8003980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 8003988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398a:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <RCCEx_PLL3_Config+0x160>)
 800398c:	4013      	ands	r3, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	69d2      	ldr	r2, [r2, #28]
 8003992:	00d2      	lsls	r2, r2, #3
 8003994:	4920      	ldr	r1, [pc, #128]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 8003996:	4313      	orrs	r3, r2
 8003998:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800399a:	4b1f      	ldr	r3, [pc, #124]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80039a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80039ac:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80039b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039b8:	e00f      	b.n	80039da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d106      	bne.n	80039ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80039c0:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80039c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039cc:	e005      	b.n	80039da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80039d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80039da:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e6:	f7fd f9a1 	bl	8000d2c <HAL_GetTick>
 80039ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039ec:	e008      	b.n	8003a00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80039ee:	f7fd f99d 	bl	8000d2c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e006      	b.n	8003a0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <RCCEx_PLL3_Config+0x15c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	ffff0007 	.word	0xffff0007

08003a20 <__libc_init_array>:
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	4d0d      	ldr	r5, [pc, #52]	; (8003a58 <__libc_init_array+0x38>)
 8003a24:	4c0d      	ldr	r4, [pc, #52]	; (8003a5c <__libc_init_array+0x3c>)
 8003a26:	1b64      	subs	r4, r4, r5
 8003a28:	10a4      	asrs	r4, r4, #2
 8003a2a:	2600      	movs	r6, #0
 8003a2c:	42a6      	cmp	r6, r4
 8003a2e:	d109      	bne.n	8003a44 <__libc_init_array+0x24>
 8003a30:	4d0b      	ldr	r5, [pc, #44]	; (8003a60 <__libc_init_array+0x40>)
 8003a32:	4c0c      	ldr	r4, [pc, #48]	; (8003a64 <__libc_init_array+0x44>)
 8003a34:	f000 f820 	bl	8003a78 <_init>
 8003a38:	1b64      	subs	r4, r4, r5
 8003a3a:	10a4      	asrs	r4, r4, #2
 8003a3c:	2600      	movs	r6, #0
 8003a3e:	42a6      	cmp	r6, r4
 8003a40:	d105      	bne.n	8003a4e <__libc_init_array+0x2e>
 8003a42:	bd70      	pop	{r4, r5, r6, pc}
 8003a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a48:	4798      	blx	r3
 8003a4a:	3601      	adds	r6, #1
 8003a4c:	e7ee      	b.n	8003a2c <__libc_init_array+0xc>
 8003a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a52:	4798      	blx	r3
 8003a54:	3601      	adds	r6, #1
 8003a56:	e7f2      	b.n	8003a3e <__libc_init_array+0x1e>
 8003a58:	08003aa0 	.word	0x08003aa0
 8003a5c:	08003aa0 	.word	0x08003aa0
 8003a60:	08003aa0 	.word	0x08003aa0
 8003a64:	08003aa4 	.word	0x08003aa4

08003a68 <memset>:
 8003a68:	4402      	add	r2, r0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d100      	bne.n	8003a72 <memset+0xa>
 8003a70:	4770      	bx	lr
 8003a72:	f803 1b01 	strb.w	r1, [r3], #1
 8003a76:	e7f9      	b.n	8003a6c <memset+0x4>

08003a78 <_init>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	bf00      	nop
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr

08003a84 <_fini>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	bf00      	nop
 8003a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8a:	bc08      	pop	{r3}
 8003a8c:	469e      	mov	lr, r3
 8003a8e:	4770      	bx	lr
